openapi: 3.0.0

info:
 version: '2.0'
 title: 'SkillSwap Web API'
 description: 'Web Resources Specification for SkillSwap'

servers:
- url: https://lbaw23111.fe.up.pt
  description: Production server

externalDocs:
 description: Find more info here.
 url: https://git.fe.up.pt/lbaw/lbaw2324/lbaw23111/-/wikis/eap

tags:
 - name: 'M01: Users'
 - name: 'M02: Posts'
 - name: 'M03: Comments'
 - name: 'M04: Groups'
 - name: 'M05: Search'
 - name: 'M06: Administration'
 - name: 'M07: Authentication'

paths:
  /users:
    get:
      tags:
        - 'M01: Users'
      summary: Get a list of users
      description: Retrieve a list of users. Available to ADM only.
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          description: Max number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - 'M01: Users'
      summary: Create a user
      description: Create a new user. Available to ADM only.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/{userId}:
    get:
      tags:
        - 'M01: Users'
      summary: Get a user by ID
      description: Retrieve a user by their ID. Available to USR, OWN and ADM.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique ID of the user
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '500':
          description: Server error
    put:
      tags:
        - 'M01: Users'
      summary: Update a user
      description: Update a user's information. Available to OWN and ADM.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique ID of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - 'M01: Users'
      summary: Delete a user
      description: Delete a user by their ID. Available to ADM only.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique ID of the user
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /posts:
    get:
      tags:
        - 'M02: Posts'
      summary: Get a list of posts
      description: Retrieve a list of posts. Available to all users.
      operationId: listPosts
      parameters:
        - name: limit
          in: query
          description: Max number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - 'M02: Posts'
      summary: Create a post
      description: Create a new post. Available to authenticated users only.
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /posts/{postId}:
    get:
      tags:
        - 'M02: Posts'
      summary: Get a post by ID
      description: Retrieve a post by its ID. Available to all users.
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          required: true
          description: Unique ID of the post
          schema:
            type: string
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - 'M02: Posts'
      summary: Delete a post
      description: Delete a post by its ID. Available to OWN or ADM.
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          required: true
          description: Unique ID of the post
          schema:
            type: string
      responses:
        '204':
          description: Post deleted
        '404':
          description: Post not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /comments:
    post:
      tags:
        - 'M03: Comments'
      summary: Create a comment
      description: Create a new comment on a post. Available to authenticated users only.
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /comments/{commentId}:
    put:
      tags:
        - 'M03: Comments'
      summary: Update a comment
      description: Update a comment by its ID. Available to OWN or ADM.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: Unique ID of the comment
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated
        '400':
          description: Invalid input
        '404':
          description: Comment not found
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - 'M03: Comments'
      summary: Delete a comment
      description: Delete a comment by its ID. Available to OWN or ADM.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: Unique ID of the comment
          schema:
            type: string
      responses:
        '204':
          description: Comment deleted
        '404':
          description: Comment not found
        '401':
          description: Unauthorized
        '500':
          description: Server error
  
  /search:
    get:
      tags:
        - 'M05: Search'
      summary: Search for users, posts, groups, etc.
      description: >
        Allows searching across different entities like users, posts, and groups.
        Returns a list of matching items based on the query.
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: Search query.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad request (e.g., invalid query parameter)
        '401':
          description: Unauthorized (if authentication is required)
        '500':
          description: Internal server error




components:
  schemas:

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the User
        username:
          type: string
          description: Unique username for the User
        email:
          type: string
          description: Email of the User
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - id
        - username
        - email

    UserProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string

    Post:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the Post
        title:
          type: string
          description: Title of the Post
        content:
          type: string
          description: Content of the Post
        creatorId:
          type: string
          description: The ID of the user who created the post
      required:
        - id
        - title
        - content
        - creatorId

    Comment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the Comment
        postId:
          type: string
          description: The ID of the post the comment is associated with
        content:
          type: string
          description: Content of the Comment
        creatorId:
          type: string
          description: The ID of the user who created the comment
      required:
        - id
        - postId
        - content
        - creatorId
